{
  "id": "blog-6",
  "title": "通过降级策略实现高可用",
  "digest": {
    "articleUrl": "/page/tech/blog/blog-6/blog-6.html",
    "content": "保持系统高可用的主要手段有负载均衡、隔离、降级和限流等，本文讨论下降级的思路与实现。服务降级，指的是当系统负载或功能异常时，将原服务禁用或者替换为简单流程的高可用方案。",
    "picUrl": "/page/tech/pic/arch.jpeg",
    "tag": "架构",
    "title": "架构进阶 - 通过降级策略实现高可用"
  },
  "navType": "BLOG",
  "phases": [
    {
      "title": "前言",
      "segment": [
        "保持系统高可用的主要手段有负载均衡、隔离、降级和限流等，本文讨论下降级的思路与实现。服务降级，指的是当系统负载或功能异常时，将原服务禁用或者替换为简单流程的高可用方案。"
      ]
    },
    {
      "title": "自动降级",
      "segment": [
        "服务降级即可通过人工控制开关来触发，也可通过监控指标自动触发。自动降级的常见监控指标有：",
        "超时：设置好超时参数（超时时间和次数），超时后自动降级",
        "失败：统计单位时间失败率或累计失败次数，失败率过高或者失败次数过多时自动降级",
        "故障：接口catch到特定错误（网络故障、业务错误、RPC错误）时，自动降级",
        "流量：流量超过一定值时自动降级"
      ]
    },
    {
      "title": "人工降级",
      "segment": [
        "人工降级一般用于可预见的场景，如系统依赖的第三方可能出错、Beta版本上线后可能暗含有BUG。人工降级一般通过灰度开关来实现，灰度开关参数可以存放于配置文件、数据库、redis、zookeeper中，客户端通过配置中心提供的API监控开关状态。",
        "当系统分层较为精细的情况下，人工降级开关可以设置在多个层级的节点李，如页面降级开关、接入层降级开关，应用层降级开关、数据库降级开关等。多级开关能更细粒度的控制降级需要。"
      ]
    },
    {
      "title": "读写降级",
      "segment": [
        "在一致性要求不高的情况下，读降级会将数据的读取源从数据库切到缓存或预设静态数据（如静态页面）。",
        "写降级用到的场景相对较少，写降级的关键是写Cache同步化、写库异步化。",
        "举个栗子，电商业务扣减库存，常规套路是先扣减DB，再扣减缓存；或者先扣缓存，再扣减DB，扣DB失败时回滚缓存。但在大促期间，由于瞬发压力较高，扣减DB很可能会坑爆系统。",
        "为了解决这个问题，扣减DB这步可以改为异步操作，通过消息中间件记录扣减动作，然后根据DB集群的处理能力平滑请求处理。"
      ]
    },
    {
      "title": "配置中心",
      "segment": [
        "如何实现一个配置中心？",
        "阿里通过Diamond中间件来实现配置中心，基于此之上的Switch平台来设置降级开关。Switch提供统一的方式来定义开关、统一的控制台和api来对开关进行查询和操控。Switch定义的开关包含丰富的可读性属性，为开关信息的维护和传承提供便利。",
        "Switch会将代码中用户标记的属性（降级时，这些属性就是降级开关）纳入自己的容器中，然后为其注册监听回调。当Switch平台数值发生变化时，就将新值通过回调更新到属性中。",
        "神州优车通过ZooKeeper建立了分布式配置中心。ZK管理配置的原理很多地方都有讲解​，此处不再赘述。"
      ]
    },
    {
      "title": "Hystrix",
      "segment": [
        "Hystrix是Netflix开发的一款隔离框架，可用于服务降级，如果读者对Hystrix闻所未闻，至少得知道以下几点分布式的常识：",
        "1 高压环境下，分布式系统的服务时常会挂，服务不可用后，它的依赖方若不加处理可能会引起连锁反应，使整个链路崩溃。",
        "2 分布式调用结果不止成功、失败两种结果，还有超时（网络问题）和服务拒绝（应用的自我保护机制）",
        "Hystrix为分布式系统提供一套易用的自我保护机制编写框架，以防止不可控制的连锁反应，避免整个链路崩溃。Hystrix可识别当前服务的执行状况，当某个异常条件被触发时，相关的回调将被执行。因此，我们可以将降级逻辑注册到感兴趣的异常事件回调中，藉此实现降级。"
      ]
    }
  ]
}
