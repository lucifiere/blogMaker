{
  "id": "blog-11",
  "title": "基础平台设计概述：理念篇",
  "digest": {
    "articleUrl": "/page/tech/blog/blog-11/blog-11.html",
    "content": "基础平台设计是互联网业务架构中最为复杂的部分之一，本文总结了笔者在学习阿里星环时接触到的设计理念，这些理念是基础平台设计中最为核心的设计思想",
    "picUrl": "/page/tech/pic/alibaba.jpeg",
    "tag": "阿里技术栈",
    "title": "基础平台设计概述：理念篇"
  },
  "navType": "BLOG",
  "phases": [
    {
      "title": "背景",
      "segment": [
        "一个新技术架构的出现，必然是为了解决某个无法绕过的问题。",
        "平台业务是整个大系统中最难设计的部分，设计基础平台需考虑的问题远不止技术实施细节，还有诸多技术之外的复杂问题。",
        "在阿里工作的一年多的时间里，见识到了非常复杂的业务架构和技术生态。了解这些架构和生态的历史可以发现，它们的进化并非是一蹴而就，而是慢慢演变成的。",
        "本文将总结在设计基础平台时，所接触到的先进的理念。"
      ]
    },
    {
      "title": "场景",
      "segment": [
        "如果你所在的团队业务扩张的速度极快，且已经有了相当的规模，那么你将面对下面这些问题：",
        "1 业务多、迭代频繁。比如公司可能每个季度都会开展一条业务线，今天要卖房子，明天就要去卖车。",
        "2 重复的业务设计与实现，缺乏能力复用。比如神州集团底下的租车业务和专车业务，交易链路有百分之七十左右的逻辑都是类似的，都有调度、营销、下单、履约、售后等流程。",
        "当你所负责的业务处于这样的环境之中时，就得考虑设计一个业务基础平台了。业务基础平台可提供能力复用，避免无意义的重复开发；可提供一套业务模板框架，加速新业务的落地；",
        "但设计基础业务平台困难重重，因为你需要面对的是：",
        "1 数量极多且欲渐增长的业务方，很多业务方都有自己的定制化业务；",
        "2 业务复杂，完整的链路生命周期长。eg：以交易为栗子，通用电商流程包括采购、供应链、进销存、营销、下单、履约、物流、售后。如果把这样的长周期业务用代码写死，对于不少新业务而言，就无法接入平台了，因为可能人家只需要其中的一部分。",
        "3 依赖复杂。eg：每个流程都会依赖很多子系统，业务与业务之前可能会互相影响",
        "4 需求实现的沟通协作成本极高；eg：需求描述简单，也没啥归档，参与人员多，平台方要来人、业务方也要来人，叽叽喳喳七嘴八舌，一个事情好久才能敲定方案。",
        "5 没有业务全局视角。eg：需求做了也没啥归档，业务只能靠程序员看代码才知道细节是什么",
        "6 技术评估困难。eg：平台改动对现有的技术体系造成的影响一般不好评估，因为业务总是不同的，分析业务对技术的影响并非易事。",
        "7 一不小心就是重复造轮子。eg：这个业务在平台是否实现过？如果归档或者交接做的不好的话，就会把同一个业务在平台写了多次，失去了设计平台的初衷。",
        "8 流量大、并发高的技术场景；"
      ]
    },
    {
      "title": "解决",
      "segment": [
        "问题这么多，什么才是设计平台的关键？阿里的毗卢大神认为是业务和平台相分离。",
        "如何实现分离？答案就是插件化。我们可把业务平台看做是一个容器，一个可在运行时动态解析插件的容器。然后将所有业务代码都封装在jar包中以插件的形式加载进来。",
        "​除了动态加载业务代码，容器还需为业务定义自己的身份识别信息，根据这个识别信息进行业务级别的插件隔离，避免其互相影响。",
        "一个完整的容器用应该支持可视化的业务模型（流程、规则、数据）呈现，让包括运营、产品在内的任何人都能一眼看清楚所有的业务模型，实现自动归档和业务自描述；支持把不同的业务模型归类到不同的域中，便于外部业务识别系统的已有能力；支持将需求分解为业务模型，并通过配置来串联实现；",
        "业务平台容器化后，需要统一建模方式，每个外部业务线都需有同一套需求描述方式，使平台可以自动解析。"
      ]
    },
    {
      "title": "运行",
      "segment": [
        "容器运行后，一次需求开发围绕三个模块进行。",
        "第一个模块维护容器中已有的业务模型，包括当前可用的服务、配置、数据，并展示一个通用视图给用户；第二个模块​​提供一条业务配置主线，产品经理搞清楚目前容器提供的能力后，将它们串联成配置，并上传配置到容器；第三个业务上线后的运行监控和数据收集。"
      ]
    },
    {
      "title": "运维",
      "segment": [
        "当业务和平台相分离后，线上运维就可以以业务维度进行了​​​。",
        "监控：​平台监控不在是技术维度的监控，而可以从业务身份维度去做监控",
        "部署：部署影响面可控，业务发布根据业务身份分为不同的物理集群，隔离部署，互不影响",
        "调整：不同业务​的流量调整是不一样的，通过业务身份隔离可以针对不同业务分别做限流一类的手段"
      ]
    }
  ]
}
