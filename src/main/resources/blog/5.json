{
  "id": "blog-5",
  "title": "通过负载均衡实现高可用",
  "digest": {
    "articleUrl": "/page/tech/blog/blog-5/blog-5.html",
    "content": "保持系统高可用的主要手段有负载均衡、隔离、降级和限流等，本系列文章将逐个介绍各种策略的思路与实现。",
    "picUrl": "/page/tech/pic/arch-1.jpeg",
    "tag": "架构",
    "title": "架构进阶 - 通过负载均衡实现高可用"
  },
  "navType": "BLOG",
  "phases": [
    {
      "title": "前言",
      "segment": [
        "保持系统高可用的主要手段有负载均衡、隔离、降级和限流等，本文讨论下负载均衡的思路与实现。",
        "负载均衡可使外部流量按特定算法分布到不同的处理单元。根据网络栈结构，负载均衡可在第二层、第四层和第七层实现，对于普通开发同学来说，只需要关心应用层的实施细节。",
        "应用层负载均衡通常基于Nginx实现，本文将讲解Nginx关于负载均衡的配置重点及具体细节。"
      ]
    },
    {
      "title": "服务器配置",
      "segment": [
        "Nginx的上游服务器配置通过调整upstream模块server的参数完成，其中，较为重要的属性是：",
        "weight：调整该服务器的权重。权重高的服务器将承受更多流量，一般性能越强的机器（如物理机、高配虚拟机、高配容器），应配置越高的权重。"
      ]
    },
    {
      "title": "均衡算法配置",
      "segment": [
        "Nginx的负载均衡算法通过调整upstream模块的配置完成，常见的算法包括：",
        "round-robin：轮询。依次为每个机器派发请求",
        "least_conn：最少连接优先。优先将请求发送到连接最少的机器上去",
        "ip_hash：IP哈希。根据报文IP哈希到具体的机器，同一个IP发来的请求将被同一个机器处理",
        "hash：自定义哈希。根据指定的报文参数来哈希到具体的机器，一般可指定为URL或一致性哈希值",
        "自定义脚本：用户可根据lua脚本自定义负载均衡逻辑"
      ]
    },
    {
      "title": "重试机制配置",
      "segment": [
        "Nginx的重试机制通过调整upstream模块server的参数完成，其中，较为重要的属性有：",
        "max_fails：失败了max_fails次后不再重试。此时重试失败，机器被标记为不可用",
        "fail_timeout：重试的超时时间"
      ]
    },
    {
      "title": "健康监控配置",
      "segment": [
        "Nginx的负载均衡算法通过调整upstream模块check的参数完成，其中，较为重要的属性有：",
        "timeout：心跳检测的超时时间",
        "rise：连续检测rise次均成功则为可用机器",
        "fail：连续检测fail次均失败则为不可用机器",
        "interval：每隔interval这么久发起一次检测",
        "type：心跳检测类型，一般包括tcp心跳检测和http心跳检测"
      ]
    },
    {
      "title": "其他配置补充",
      "segment": [
        "调整upstream模块server的参数可以指定机器角色：",
        "down：将server属性设为down时，该机器被标记为不可用，临时下线时可指定这个属性",
        "调整upstream模块server的参数可以指定机器能支持的最大长连接：",
        "keepalive：指定该组机器能支持的最大长连接数量，当数量超出时，当前最不活跃的连接将被关闭。此值设置太大会导致系统负载过大，设置太小会导致连接创建成本增加。​"
      ]
    },
    {
      "title": "动态负载均衡",
      "segment": [
        "日常运维中，机器上下线是个高频行为，手动改动配置麻烦且不可靠，此时需要考虑动态负载均衡。动态负载均衡首先需要引入服务发现中间件，常见的有ZooKeeper、Eureka、Consul。服务发现中间件负责的事情主要有：",
        "a 注册：新的机器可以注册到中间件",
        "b 发现：用户可以从中间件发现所有机器",
        "c 高可靠：不可用机器自动踢掉",
        "d 通知：公共配置变更能推送到所有机器",
        "e 集群化：防止单点故障",
        "除了中间件以外，还得有一个控制Nginx的代理，这个代理可以根据中间件拿到的信息自动的修改Nginx配置并重启Nginx，常见的代理有confd。一次动态均衡的过程简单来说是：启动confd，confd监听服务发现中间件，若监听到中间件配置变更，则更新upstream并重启nginx使服务生效。"
      ]
    }
  ]
}
